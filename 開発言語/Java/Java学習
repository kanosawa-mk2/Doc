Chapter 1 　 Java の 基本 を 知ろ う 　 ～ イントロダクション ～
1-1 　 Java とは
1-1-1 　 Java の 特長
1-1-2 　 Java の 3 つ の エディション と 2 つ の 環境
1-1-3 　 Java VM の 種類
1-1-4 　 Java が 実行 さ れる 流れ
1-2 　「 Hello Java World!」 を 表示 し て みよ う
1-2-1 　 Java の インストール
1-2-2 　 Eclipse の インストール
1-2-3 　「 Hello Java World!」 プログラム を 作成 し て みよ う
1-2-4 　 プログラム の 実行 を する

Chapter 2 　 基本 的 な 書き方 を 身 に つける
2-1 　 Java の 基本 的 な 記法
2-1-1 　 文 と ブロック
2-1-2 　 コメント
2-1-3 　 変数、 型、 リテラル
2-1-4 　 演算子
2-1-5 　 制御 構文
2-2 　 クラス と メソッド
2-2-1 　 クラス の 宣言
2-2-2 　 メソッド の 宣言
2-2-3 　 修飾 子
2-2-4 　 メソッド の オーバー ロード
2-2-5 　 main メソッド
2-2-6 　 インスタンス
2-2-7 　 this を 用い た 記述 の 注意 点
2-2-8 　 コンス トラクタ
2-3 　 情報 共有 の ため に 知っ て おき たい 機能
2-3-1 　 Javadoc
2-3-2 　 アノテーション
2-4 　 名前 の つけ 方 に 注意 する
2-4-1 　 クラス と 変数 は キャメルケース で、 定数 は スネークケース で
2-4-2 　 変数 名 の 後ろ に_ は つけ ない
2-4-3 　 変数 は 名詞、 メソッド は 動詞 で 命名 する
2-4-4 　「 不吉 な 匂い」 が する 名前 に 気 を つける 

Chapter 3 　 型 を 極める
3-1 　 プリミティブ 型 と 参照 型
3-1-1 　 Java は 静的 型付け 言語
3-1-2 　 プリミティブ 型
3-1-3 　 参照 型
3-1-4 　 ラッパークラス
3-1-5 　 オート ボクシング と アン ボクシング
3-2 　 クラス の 作成
3-2-1 　 クラス を 定義 する
3-2-2 　 パッケージ
3-2-3 　 アクセス 修飾 子
3-2-4 　 その他 の よく 利用 する 修飾 子
3-2-5 　 継承
3-2-6 　 抽象 クラス
3-2-7 　 インタフェース
3-2-8 　 匿名 クラス
3-3 　 型 判定 と オブジェクト の 等価 性
3-3-1 　 instanceof 演算子
3-3-2 　 オブジェクト の 等価 性
3-4 　 型 にまつわる 問題 を 予防 する
3-4-1 　 列挙 型（ enum）
3-4-2 　 ジェネリクス（ 総称 型） Chapter 4 　 配列 と コレクション を 極める

Chapter 4 　 配列 と コレクション を 極める
4-1 　 配列 で 複数 の データ を 扱う
4-1-1 　 配列 の 基本 を 理解 する
4-1-2 　 配列 を 初期化 する
4-1-3 　 配列 への 代入 と 取り出し
4-1-4 　 配列 の サイズ を 変更 する
4-1-5 　 Arrays クラス を 利用 し て 配列 を 操作 する
4-1-6 　 可変 長 引数 で メソッド を 定義 する
4-2 　 コレクションフレームワーク で 複数 の データ を 扱う
4-2-1 　 配列 の 限界 と コレクション の 特徴
4-2-2 　 代表的 な コレクション と 使い分け の 基準
4-3 　 配列 に 近い 方法 で 複数 の 要素 を 扱う 　 ～ List インタフェース
4-3-1 　 List インターフェース の 基本
4-3-2 　 List を 作成 する
4-3-3 　 List の 代表的 な メソッド
4-3-4 　 List を ソート する
4-3-5 　 List を 検索 する
4-3-6 　 List の イテレーション
4-3-7 　 List の 3 つ の 実装 クラス を 理解 する
4-3-8 　 List の 実装 クラス を どう 使い分ける か
4-4 　 キー と 値 の 組み合わせ で 値 を 扱う 　 ～ Map インタフェース
4-4-1 　 Map を 作成 する
4-4-2 　 Map の 使い方
4-4-3 　 Map の 3 つ の 実装 クラス を 理解 する
4-4-4 　 Map の 実装 クラス を どう 使い分ける か
4-5 　 値 の 集合 を 扱う 　 ～ Set インタフェース
4-5-1 　 Set の 初期化
4-5-2 　 Set の 使い方
4-5-3 　 Set の 3 つ の 実装 クラス を 理解 する
4-6 　 その他 の インタフェース
4-6-1 　 値 を 追加 し た 順 と 同じ 順 に 値 を 取得 する 　 ～ Queue インタフェース
4-6-2 　 両端 キュー を 使う 　 ～ Deque インタフェース

Chapter 5 　 ストリーム 処理 を 使いこなす 　～ ラムダ 式 と Stream API ～
5-1 　 Stream API を 利用 する ため の 基本
5-1-1 　 Stream API で コレクション の 操作 は どう 変わる か
5-1-2 　 ラムダ 式 の 書き方 を マスター する
5-1-3 　 メソッド 参照
5-2 　 Stream を 作成 する
5-2-1 　 List や Set から Stream を 作成 する
5-2-2 　 配列 から Stream を 作成 する
5-2-3 　 Map から Stream を 作成 する
5-2-4 　 数値 範囲 から Stream を 作成 する
5-3 　 Stream に対する「 中間 操作」
5-3-1 　 要素 を 置き換える 中間 操作
5-3-2 　 要素 を 絞り込む 中間 操作
5-3-3 　 要素 を 並べ 替える 中間 操作
5-4 　 Stream に対する「 終 端 操作」
5-4-1 　 繰り返し 処理 を おこなう 終 端 操作
5-4-2 　 結果 を まとめ て 取り出す 終 端 操作
5-4-3 　 結果 を 1 つ だけ 取り出す 終 端 操作
5-4-4 　 集計 処理 を おこなう 終 端 操作
5-5 　 Stream API を 使う ため の ポイント
5-5-1 　 王道 は map、 filter、 collect
5-5-2 　 n 回 の 繰り返し を する IntStream
5-5-3 　 List や Map に対して 効率的 に 処理 を おこなう
5-6 　 Stream API を 使っ た List の 初期化
5-6-1 　 Stream を 用い て 列挙 し た 値 から List を 作成 する
5-6-2 　 Stream を 用い て 値 の 範囲 から List を 作成 する
5-6-3 　 Stream を 用い て 配列 を 作成 する

Chapter 6 　 例外 を 極める
6-1 　 例外 の 基本
6-1-1 　 例外 の 3 つ の 種類
6-1-2 　 例外 を 表す 3 つ の クラス
6-1-3 　 例外処理 の 3 つ の 構文 を 使いこなす
6-2 　 例外処理 で つまずか ない ため の ポイント
6-2-1 　 エラーコード を return し ない
6-2-2 　 例外 を もみ消さ ない
6-2-3 　 恐怖 の throws Exception 感染
6-2-4 　 どの 階層 で 例外 を 捕捉 し て 処理 する べき か
6-2-5 　 独自 例外 を 作成 する
6-2-6 　 例外 の トレンド 

Chapter 7 　 文字列 操作 を 極める
7-1 　 文字列 操作 の 基本
7-1-1 　 String クラス の 特徴
7-1-2 　 文字列 を 結合 する 3 つ の 方法
7-1-3 　 文字列 を 分割 する
7-1-4 　 複数 の 文字列 を 連結 する
7-1-5 　 文字列 を 置換 する
7-1-6 　 文字列 を 検索 する
7-2 　 正規表現 で 文字列 を 柔軟 に 指定 する
7-2-1 　 文字列 が 正規表現 の パターン に 適合 する かを チェック する
7-2-2 　 正規表現 を 用い て 文字列 を 分割 する
7-2-3 　 正規表現 を 用い て 文字列 を 置換 する
7-2-4 　 String クラス の メソッド で 正規表現 を 使う
7-3 　 文字列 の フォーマット と 出力
7-3-1 　 文字列 を 出力 する
7-3-2 　 MessageFormat について
7-4 　 文字 コード を 変換 する
7-4-1 　 Java は どの よう な 文字 コード を 利用 し て いる か
7-4-2 　 Java の 文字 から 任意 の 文字 コード へ 変換 する
7-4-3 　 任意 の 文字 コード から Java の 文字 へ 変換 する
7-4-4 　 文字 化け の 原因 と 対策
7-4-5 　 String クラス の intern メソッド で 同一 の 文字列 を 探す には Chapter 8 　 ファイル 操作 を 極める
8-1 　 ファイル 操作 の 基本
8-1-1 　 File クラス で 初期化 する
8-1-2 　 Path クラス で 初期化 する
8-2 　 ファイル を 読み書き する
8-2-1 　 バイナリ ファイル を 読み込む
8-2-2 　 バイナリ ファイル に 書き込む
8-2-3 　 テキストファイル を 読み込む
8-2-4 　 テキストファイル に 書き込む
8-2-5 　 Stream API を 使っ て ファイル を 読み込む
8-3 　 ファイル を 操作 する
8-3-1 　 ファイル を コピー する
8-3-2 　 ファイル を 削除 する
8-3-3 　 ファイル を 作成 する
8-3-4 　 ディレクトリ を 作成 する
8-3-5 　 一時 ファイル を 作成 する
8-4 　 さまざま な ファイル を 扱う
8-4-1 　 プロパティファイル
8-4-2 　 CSV ファイル
8-4-3 　 XML
8-4-4 　 JSON 

Chapter 9 　 日付 処理 を 極める
9-1 　 Date と Calendar を 使い分ける
9-1-1 　 Date クラス を 利用 する
9-1-2 　 Calendar クラス を 利用 する
9-1-3 　 Date クラス と Calendar クラス の 相互 変換 を おこなう
9-2 　 Date and Time API を 利用 する
9-2-1 　 Date and Time API の メリット
9-2-2 　 日付・時間・日時 を それぞれ 別 クラス で 扱う
9-2-3 　 年月日 などを 指定 し て インスタンス を 生成 できる
9-2-4 　 年月日 の 各 フィールド の 値 を 個別 に 取得 できる
9-2-5 　 年月日 の 計算 が できる
9-3 　 日付 クラス と 文字列 を 相互 変換 する
9-3-1 　 日付 クラス を 任意 の 形式 で 文字列 出力 する
9-3-2 　 文字列 で 表現 さ れ た 日付 を Date クラス に 変換 する
9-3-3 　 SimpleDateFormat クラス は スレッドセーフ では ない
9-4 　 Date and Time API で 日付／ 時間 クラス と 文字列 を 相互 変換 する
9-4-1 　 日付／ 時間 クラス を 任意 の 形式 で 文字列 出力 する
9-4-2 　 文字列 で 表現 さ れ た 日付 を 日付／ 時間 クラス に 変換 する
9-4-3 　 DateTimeFormatter クラス は スレッドセーフ
9-5 　 和暦 に 対応 する
9-5-1 　 西暦 を 和暦 に 変換 する
9-5-2 　 和暦 を 利用 し た 日付 の 文字列 表現 と 日付 クラス との 相互 変換 

Chapter 10 　 オブジェクト 指向 を たしなむ
10-1 　 プリミティブ 型 の 値 渡し と 参照 型 の 値 渡し
10-1-1 　 プリミティブ 型 と 参照 型 の 値 の 渡し 方
10-1-2 　 操作 し ても 値 が 変わら ない イミュータブル な クラス
10-1-3 　 操作 する と 値 が 変わる ミュータブル な クラス
10-1-4 　 イミュータブル な クラス の メリット と デメリット
10-2 　 可視 性 を 適切 に 設定 し て バグ の 少ない プログラム を 作る
10-2-1 　 Java が 使える 可視 性
10-2-2 　 可視 性 の グッドプラクティス
10-3 　 オブジェクト の ライフサイクル を 把握 する
10-3-1 　 3 種類 の ライフサイクル
10-3-2 　 ライフサイクル の グッドプラクティス
10-4 　 インタフェース と 抽象 クラス を 活かし て 設計 する
10-4-1 　 ポリモーフィズム を 実現 する ため の しくみ
10-4-2 　 インタフェース と 抽象 クラス の 性質 と 違い
10-4-3 　 インタフェース の デフォルト 実装
10-4-4 　 インタフェース の static メソッド 

Chapter 11 　 スレッドセーフ を たしなむ
11-1 　 マルチスレッド の 基本
11-1-1 　 マルチスレッド とは
11-1-2 　 マルチスレッド に する メリット
11-1-3 　 マルチスレッド で 困る こと
11-1-4 　 同時に 作業 する 場合 に 起こる 問題
11-1-5 　 マルチスレッド の 問題 に 対応 する のが 難しい 理由
11-2 　 スレッドセーフ を 実現 する
11-2-1 　 スレッドセーフ とは
11-2-2 　 ステート レス に する
11-2-3 　「 メソッド 単位」 では なく、 必要 最低限 な「 一連 の 処理」 に対して 同期 化 する 

Chapter 12 　 デザイン パターン を たしなむ
12-1 　 デザイン パターン の 基本
12-1-1 　 デザイン パターン とは
12-1-2 　 デザイン パターン を 利用 する メリット とは
12-2 　 生成 に関する パターン
12-2-1 　 AbstractFactory パターン 　～ 関連 する 一連 の インスタンス 群 を まとめ て 生成 する
12-2-2 　 Builder パターン 　～ 複合 化 さ れ た インスタンス の 生成 過程 を 隠ぺい する
12-2-3 　 Singleton パターン 　～ ある クラス について、 インスタンス が 単一 で ある こと を 保証 する
12-3 　 構造 に関する パターン
12-3-1 　 Adapter パターン 　～ インタフェース に 互換性 の ない クラス どうし を 組み合わせる
12-3-2 　 Composite パターン 　～ 再帰 的 な 構造 の 取り扱い を 容易 に する
12-4 　 振る舞い に関する パターン
12-4-1 　 Command パターン 　～「 命令」 を インスタンス として 扱う こと により、 処理 の 組み合わせ などを 容易 に する
12-4-2 　 Strategy パターン 　～ 戦略 を かん た ん に 切り替え られる し くみ を 提供 する
12-4-3 　 Iterator パターン 　～ 保有 する インスタンス の 各 要素 に 順番 に アクセス する 方法 を 提供 する
12-4-4 　 Observer パターン 　～ ある インスタンス の 状態 が 変化 し た 際 に、 その インスタンス 自身 が 状態 の 変化 を 通知 する し くみ を 提供 する 

Chapter 13 　 周辺 ツール で 品質 を 上げる
13-1 　 Maven で ビルド する
13-1-1 　 ビルド とは
13-1-2 　 Maven の 基本 的 な 利用 方法
13-1-3 　 Maven に プラグ イン を 導入 する
13-2 　 Javadoc で ドキュメンテーション コメント を 記述 する
13-2-1 　 なぜ Javadoc コメント を 書い て おく のか
13-2-2 　 Javadoc の 基本 的 な 記述 方法
13-2-3 　 知っ て おく と 便利 な 記述 方法
13-2-4 　 API ドキュメント を 作成 する
13-3 　 Checkstyle で フォーマット チェック を する
13-3-1 　 Checkstyle とは
13-3-2 　 Eclipse による フォーマット チェック
13-3-3 　 Maven による フォーマット チェック
13-4 　 FindBugs で バグ を チェック する
13-4-1 　 Eclipse による バグ チェック
13-4-2 　 Maven による バグ チェック
13-5 　 JUnit で テスト を する
13-5-1 　 なぜ、 テスト 用 プログラム を 作っ て 試験 を する のか
13-5-2 　 テスト コード を 実装 する
13-5-3 　 テスト を 実行 する
13-6 　 Jenkins で 品質 レポート を 作成 する
13-6-1 　 継続 的 インテグレーション と Jenkins
13-6-2 　 Jenkins の 環境 を 準備 する
13-6-3 　 Jenkins で ビルド を 実行 する
13-6-4 　 Jenkins で レポート を 生成 する 

Chapter 14 　 ライブラリ で 効率 を 上げる
14-1 　 再利用 可能 な コンポーネント を 集め た Apache Commons
14-1-1 　 Commons Lang
14-1-2 　 Commons BeanUtils
14-1-3 　 シャローコピー と ディープコピー
14-2 　 CSV で 複数 の データ を 保存 する
14-2-1 　 CSV とは
14-2-2 　 Super CSV で CSV 変換 を 効率的 に おこなう
14-2-3 　 CSV データ を 読み込む
14-2-4 　 CSV データ を 書き込む
14-3 　 JSON で 構造 の ある データ を シンプル に する
14-3-1 　 JSON とは
14-3-2 　 Jackson で JSON を 扱う
14-3-3 　 JSON データ を 解析 する
14-3-4 　 JSON データ を 生成 する
14-4 　 Logger で アプリケーション の ログ を 保存 する
14-4-1 　 ログ と レベル
14-4-2 　 SLF 4 J ＋ Logback で ロギング を おこなう
14-4-3 　 SLF 4 J ＋ Logback の 基本 的 な 使い方
14-4-4 　 ファイル に 出力 する
14-4-5 　 変数 を 出力 する
14-4-6 　 パッケージ ごと に 出力 ログ レベル を 変更 する
14-4-7 　 動的 に 設定 を 変更 する 索引



