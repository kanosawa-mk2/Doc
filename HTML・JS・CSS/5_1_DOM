■DOM(Document Object Model)
 HTMLやXMLのようなマークアップ言語で書かれたドキュメントにアクセスするための「標準的な」しくみ
 クロスブラウザ環境でも互換性の高いコードを記述できる

DOMはドキュメントを文書ツリーをして扱う
　★文書ツリーの解釈はブラウザ毎に違う

■DOMの３つのレベル
 W3C(World Wide Web Consortium)が標準化
 Levael･･･ノードの参照/追加/置換/削除などの基本機能を定義
 Levae2･･･Level1に、スタイル操作やイベントモデル、ノードの範囲指定などの機能を追加
 Levae3･･･Level2に、XPath、妥当性の検証、読み込み/保存などの機能を追加

■特定のノードを取得
 ダイレクトアクセス･･･IDやタグ名で目的の要素を直接取得
 ノードウォーキング･･･ある要素を起点に子、親、兄弟要素を相対的に取得

 ▼ID値で検索
  document.getElementById // 戻り値 Nodeオブジェクト
  
 ▼タグ名で検索
  document.getElementsByTagName //戻り値 NodeListオブジェクト
  
 ▼class属性で検索
  document.getElementsByClassName // 戻り値 NodeListオブジェクト
  
 ▼相対的な位置で検索
  [5_2_相対的なノードの取得] 参照
  
  childNodeは要素以外のノードの返すの
  nodeType･･･Nodeの種類
  
  1･･･要素ノード
  2･･･属性ノード
  3･･･テキストノード
  4･･･CDATAセクション
  5･･･実体参照ノード
  7･･･実体宣言ノード
  8･･･処理命令ノード
  9･･･コメントノード
  10･･･文書ノード
  11･･･文書の断片
  12･･･基本宣言ノード
 
■属性値を取得/設定する
  
 link.href
 link.getAttribute('href') // HTMLとJavascriptで名前の相違を意識する必要がない
                           // 取得/設定する属性名を、スクリプトから動的に変更できる
 
■ノードを追加/置換/削除する
 ▼作成
  1.createElement,createTextNodeメソッドなど
  2.要素ノード.appendChild(1のノード)
 
 ▼置換
  ノード.replaceChild(置換後のノード,置換対象のノード)
   
 ▼削除
  ノード.removeChild(削除対象のノード)
 
■スタイルシートの操作
 ・インラインスタイルにアクセス(styleプロパティ)
   elem.style.backgroundColor = 'red';
   
 ・外部スタイルシートを適用する(classNameプロパティ)
   elem.className = 'className';
  
■DOMにおけるイベント処理
 イベントリスナ
  ・同一要素の同一イベントに対して、複数のイベントリスナを関連付けできる
  ・いったん設定したイベントリスナを削除できる

 ▼イベントリスナを登録する
  
