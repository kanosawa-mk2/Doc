■クラスライクな継承

// 基底クラスのコンストラクタを呼び出す
// 基底クラスで定義されたメンバを、派生クラスにコピーする
// 引数 initializeBase(現在のインスタンス, 親クラス, 引数配列)
function initializeBase(derive, base, baseArgs){
 base.apply(derive, baseArgs); //applyメソッド 
 for(prop in base.prototype) {
  var proto = derive.constructor.prototype;
  if(!proto[prop]){
   proto[prop] = base.prototype[prop];
  }
 }
}

var Member = function(firstName, lastName){
 this.firstName = firstName;
 this.lastName = lastName;
};

Member.prototype.getName = function(){
 return this.lastName + ' ' + this.firstName;
}

var SpecialMember = function(firstName, lastName, role) {
 initializeBase(this, Member, [firstName, lastName]); // 
 this.role = role;
}

SpecialMember.prototype.isAdministrator = function() {
 return (this.role == 'Administrator');
};

var mem = new SpecialMember('テスト', '太郎' , 'Administrator');
document.writeln('名前:' + mem.getName());
document.writeln('管理者:' + mem.isAdministrator());



// ■基底クラスのメソッドを派生クラスで利用する
SpecialMember.prototype.getName = function() {
 var result = Member.prototype['getName'].apply(this,[]); // 基底クラスのメソッドを派生クラスで利用
 return result + '(' + this.role + ')';
};

var mem = new  SpecialMember('テスト', '太郎' , 'Administrator');
document.writeln('名前:' + getName()); // 太郎 テスト(Administrator)

■プライベートメンバーの定義
function Triangle() {
 var _base;     // プライベートプロパティ
 var _height;
 
 // プライベートメソッド
 var _checkArgs = function(val){
  return (!isNaN(val) && > 0);
 }
 
 this.setBase = function(base) {
  if(_checkArgs(base)) {_base = base);
 }
 this.setHeight = function(heigth){
  if(_checkArgs(base)) {_heigth = heigth);
 }
 this.getBase = function() { return _base;}
 this.getHeight = function() { return _heigth;}
}

Triangle.prptotype.getArea = function(){
 return this.getBase() * this.getHeight() / 2;
}

var t = new Triangle();
t._base = 10;
t._height = 2;
document.writeln(t.getArea()); // NaN

t.setBase(10);
t.setHeight(2);
document.writeln(t.getArea()); // 10

■名前空間/パッケージを作成
var Wings = function() {};

Wings.Member = function(firstName, lastName){
 this.firstName = firstName;
 this.lastName = lastName;
};

Wings.Member.prototype = {
 getName : function(){
  return this.lastName + ' ' + thsi.firstName;
 }
};

var mem = new Wings.Member('テスト', '太郎');
document.writeln(mem.getName()); // 太郎　テスト
